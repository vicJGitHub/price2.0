2018-08-23 10:09:39,820 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 3340 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 10:09:39,833 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 10:09:39,835 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 10:09:46,283 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 6.955 seconds (JVM running for 9.059)
2018-08-23 11:16:31,128 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 3340 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 11:16:31,128 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 11:16:31,129 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 11:16:33,121 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 2.046 seconds (JVM running for 4015.855)
2018-08-23 11:19:43,484 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:19:43,485 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:19:52,709 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:19:52,709 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:20:07,358 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:20:07,358 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:20:33,678 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:20:33,678 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:20:33,717 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:20:33,983 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:20:34,098 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:20:34,118 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:20:34,121 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:20:34,123 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:20:34,126 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:20:34,131 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/price/analysis/leaderBoard<:=====:>GET<:=====:>timeType=2&priceChangeType=2<:=====:>null
2018-08-23 11:20:34,139 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:null
2018-08-23 11:20:34,140 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:20:34,147 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0ec51f86f23f4cdfade5b59dda6ac357(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /price/analysis/leaderBoard(String), 0:0:0:0:0:0:0:1(String), 49876(Integer), null, null, 2018-08-23 11:20:34.131(Timestamp), null, timeType=2&priceChangeType=2(String)
2018-08-23 11:20:34,173 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:20:43,814 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:20:43,814 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:20:43,816 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:20:43,817 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:20:43,817 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:20:43,825 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:20:43,826 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:20:43,826 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:20:43,828 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:20:43,830 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/price/analysis/leaderBoard<:=====:>GET<:=====:>timeType=2&priceChangeType=2<:=====:>null
2018-08-23 11:20:43,833 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:null
2018-08-23 11:20:43,833 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:20:43,834 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 965a8398e82f452ea2ad2546fef00ee9(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /price/analysis/leaderBoard(String), 0:0:0:0:0:0:0:1(String), 49876(Integer), null, null, 2018-08-23 11:20:43.83(Timestamp), null, timeType=2&priceChangeType=2(String)
2018-08-23 11:20:43,857 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:21:22,112 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:21:22,112 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:21:22,116 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:21:27,070 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:21:27,072 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:21:27,078 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:21:28,303 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:21:28,304 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:21:28,318 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:21:36,338 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/price/analysis/leaderBoard<:=====:>GET<:=====:>timeType=2&priceChangeType=2<:=====:>null
2018-08-23 11:21:36,340 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:null
2018-08-23 11:21:36,340 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:21:36,341 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: c02e16ed34104d38bf441d8bbc587e61(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /price/analysis/leaderBoard(String), 0:0:0:0:0:0:0:1(String), 49876(Integer), null, null, 2018-08-23 11:21:36.338(Timestamp), null, timeType=2&priceChangeType=2(String)
2018-08-23 11:21:36,373 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:22:19,504 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:22:19,504 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:22:19,506 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:22:24,651 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:22:24,652 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:22:24,653 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:22:24,654 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:22:24,654 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:22:24,656 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:22:51,227 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/price/analysis/leaderBoard<:=====:>GET<:=====:>timeType=2&priceChangeType=2<:=====:>null
2018-08-23 11:22:51,229 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:null
2018-08-23 11:22:51,229 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:22:51,230 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 3735d66a5f1d4d9ea655ea296eaa8745(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /price/analysis/leaderBoard(String), 0:0:0:0:0:0:0:1(String), 49876(Integer), null, null, 2018-08-23 11:22:51.227(Timestamp), null, timeType=2&priceChangeType=2(String)
2018-08-23 11:22:51,270 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:24:04,089 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:24:04,089 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:24:05,386 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 3340 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 11:24:05,387 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 11:24:05,387 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 11:24:06,769 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.405 seconds (JVM running for 4469.499)
2018-08-23 11:24:06,819 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:24:06,820 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:24:06,827 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:24:06,908 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:24:06,909 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:24:06,912 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:24:06,912 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:24:06,914 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:24:06,915 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:26:43,402 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:26:43,403 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:26:43,404 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:26:43,408 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:26:43,409 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:26:43,411 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:26:43,412 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:26:43,412 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:26:43,414 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:28:38,643 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:28:38,643 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:28:38,644 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:28:38,646 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:28:38,646 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:28:38,648 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:28:38,649 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:28:38,649 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:28:38,659 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:29:29,553 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:29:29,553 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:29:29,554 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:29:29,555 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:29:29,556 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:29:29,557 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:29:29,558 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:29:29,559 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:29:29,561 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:29:45,224 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:29:45,224 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:29:45,226 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:29:45,228 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/price/analysis/monitor<:=====:>GET<:=====:>timeType=2&priceChangeType=2<:=====:>Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
2018-08-23 11:29:45,244 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.IllegalStateException:Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
2018-08-23 11:29:45,244 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:29:45,246 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: b80c004c424a4bb49ada37fcd6b5d7da(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /price/analysis/monitor(String), 0:0:0:0:0:0:0:1(String), 52904(Integer), null, null, 2018-08-23 11:29:45.227(Timestamp), Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.(String), timeType=2&priceChangeType=2(String)
2018-08-23 11:29:45,270 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:29:54,045 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:29:54,046 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:29:54,047 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:29:54,048 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 11:29:54,049 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:29:54,051 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:29:54,051 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 11:29:54,052 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:29:54,054 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 11:31:02,023 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:31:02,024 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:31:02,025 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:31:02,040 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 11:31:02,041 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:31:02,047 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 11:31:02,051 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/findMonitorCount<:=====:>GET<:=====:>null<:=====:>element cannot be mapped to a null key
2018-08-23 11:31:02,054 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:element cannot be mapped to a null key
2018-08-23 11:31:02,054 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:31:02,055 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cae0bd41db07408e9731ef44903941dd(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/findMonitorCount(String), 0:0:0:0:0:0:0:1(String), 52904(Integer), null, null, 2018-08-23 11:31:02.051(Timestamp), element cannot be mapped to a null key(String), null
2018-08-23 11:31:02,089 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:31:10,335 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:31:10,335 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:31:10,336 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:31:13,218 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 11:31:13,219 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:31:13,255 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 11:31:23,428 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/findMonitorCount<:=====:>GET<:=====:>null<:=====:>element cannot be mapped to a null key
2018-08-23 11:31:23,432 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:element cannot be mapped to a null key
2018-08-23 11:31:23,432 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:31:23,433 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 5aec151b2e034650a44696a05803e315(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/findMonitorCount(String), 0:0:0:0:0:0:0:1(String), 52904(Integer), null, null, 2018-08-23 11:31:23.428(Timestamp), element cannot be mapped to a null key(String), null
2018-08-23 11:31:23,464 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:31:39,134 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:31:39,134 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:31:39,135 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:31:39,137 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 11:31:39,137 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:31:39,142 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 11:32:13,902 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/findMonitorCount<:=====:>GET<:=====:>null<:=====:>element cannot be mapped to a null key
2018-08-23 11:32:13,907 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:element cannot be mapped to a null key
2018-08-23 11:32:13,907 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:32:13,908 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0e11211bd7cf4d1792bbd873b7855661(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/findMonitorCount(String), 0:0:0:0:0:0:0:1(String), 52904(Integer), null, null, 2018-08-23 11:32:13.902(Timestamp), element cannot be mapped to a null key(String), null
2018-08-23 11:32:13,931 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:32:36,119 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:32:36,119 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:32:36,121 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:32:36,122 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 11:32:36,123 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:32:36,127 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 11:32:36,131 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/findMonitorCount<:=====:>GET<:=====:>null<:=====:>element cannot be mapped to a null key
2018-08-23 11:32:36,135 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:element cannot be mapped to a null key
2018-08-23 11:32:36,135 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 11:32:36,136 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 9ab15a0381c84bcb9ec3ae395c9501f6(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/findMonitorCount(String), 0:0:0:0:0:0:0:1(String), 52904(Integer), null, null, 2018-08-23 11:32:36.131(Timestamp), element cannot be mapped to a null key(String), null
2018-08-23 11:32:36,156 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 11:32:41,705 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 3340 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 11:32:41,706 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 11:32:41,706 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 11:32:43,164 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.5 seconds (JVM running for 4985.89)
2018-08-23 11:32:46,526 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 11:32:46,526 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 11:32:46,534 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 11:32:46,583 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 11:32:46,584 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 11:32:46,588 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 14:39:14,255 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 3340 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 14:39:14,256 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 14:39:14,256 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 14:39:15,787 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.57 seconds (JVM running for 16178.4)
2018-08-23 14:40:01,903 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 14:40:01,903 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 14:40:01,911 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 14:40:01,962 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 14:40:01,963 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 14:40:01,969 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 14:40:01,974 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProductByType<:=====:>GET<:=====:>null<:=====:>element cannot be mapped to a null key
2018-08-23 14:40:01,976 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:element cannot be mapped to a null key
2018-08-23 14:40:01,977 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 14:40:01,978 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 9a2a27a3abf14b78a6923ea5068109b8(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProductByType(String), 0:0:0:0:0:0:0:1(String), 55148(Integer), null, null, 2018-08-23 14:40:01.974(Timestamp), element cannot be mapped to a null key(String), null
2018-08-23 14:40:02,012 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 14:40:07,873 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 14:40:07,873 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 14:40:07,874 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 14:40:07,877 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 14:40:07,877 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 14:40:07,906 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 14:40:07,909 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProductByType<:=====:>GET<:=====:>null<:=====:>element cannot be mapped to a null key
2018-08-23 14:40:07,913 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:element cannot be mapped to a null key
2018-08-23 14:40:07,913 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 14:40:07,914 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: f6efc20916d14028a08db9bc9882d6f6(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProductByType(String), 0:0:0:0:0:0:0:1(String), 55148(Integer), null, null, 2018-08-23 14:40:07.909(Timestamp), element cannot be mapped to a null key(String), null
2018-08-23 14:40:07,935 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 14:40:24,504 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 14:40:24,504 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 14:40:24,505 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 14:40:29,749 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 14:40:29,750 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 14:40:29,812 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 14:40:39,015 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProductByType<:=====:>GET<:=====:>null<:=====:>element cannot be mapped to a null key
2018-08-23 14:40:39,018 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.NullPointerException:element cannot be mapped to a null key
2018-08-23 14:40:39,018 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 14:40:39,019 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: e9a8ef6b64be402689081d3da2b353cd(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProductByType(String), 0:0:0:0:0:0:0:1(String), 55148(Integer), null, null, 2018-08-23 14:40:39.015(Timestamp), element cannot be mapped to a null key(String), null
2018-08-23 14:40:39,054 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 14:41:03,596 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 3340 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 14:41:03,596 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 14:41:03,596 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 14:41:05,128 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.553 seconds (JVM running for 16287.739)
2018-08-23 14:41:09,968 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 14:41:09,969 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 14:41:09,978 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 14:41:10,036 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 14:41:10,037 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 14:41:10,043 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 14:56:32,139 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 3340 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 14:56:32,139 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 14:56:32,139 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:05:46,027 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:05:46,028 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:05:46,029 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:05:50,328 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 4.795 seconds (JVM running for 5.616)
2018-08-23 15:05:55,534 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:05:55,534 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:05:55,737 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:05:55,963 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 15:05:56,224 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:05:56,249 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 15:06:07,229 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:06:07,230 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:06:07,232 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:06:20,466 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:06:20,466 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:06:20,468 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:06:20,470 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 15:06:20,488 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:06:20,496 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 15:07:51,765 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:07:51,765 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:07:51,765 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:07:53,214 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.477 seconds (JVM running for 128.5)
2018-08-23 15:08:01,825 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:08:01,826 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:08:01,833 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:08:01,906 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 15:08:01,907 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:08:01,913 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 15:08:11,606 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:08:11,606 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:08:11,608 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:08:11,610 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 15:08:11,611 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:08:11,619 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 15:08:27,163 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:08:27,163 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:08:27,164 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:08:27,189 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now()) group by a.product_id; 
2018-08-23 15:08:27,193 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:08:27,196 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 15:08:27,197 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select a.product_id,avg(a.avg_price) avg_price,a.unit,d.name productName,a.market_id from price_publish.avg_price_statistics a left join province p on p.id = a.province_id left join product_info d on d.id = a.product_id where p.name = '贵州省' and YEARWEEK(date_format(a.create_time,'%Y-%m-%d')) = YEARWEEK(now())-1 group by a.product_id; 
2018-08-23 15:08:27,198 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:08:27,200 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 3
2018-08-23 15:10:07,228 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:10:07,229 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:10:07,230 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:10:07,235 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 15:10:07,236 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:10:07,243 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 15:11:37,334 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:11:37,334 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:11:37,334 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:11:38,705 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.394 seconds (JVM running for 353.989)
2018-08-23 15:11:38,799 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:11:38,800 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:11:38,806 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:11:38,859 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on,p.id from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 15:11:38,860 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:11:38,866 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 134
2018-08-23 15:12:29,614 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:12:29,614 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:12:29,616 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:12:29,620 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProduct<:=====:>GET<:=====:>productId=67c0a9b618bb47488ab819c05cbff6af<:=====:>Request method 'GET' not supported
2018-08-23 15:12:29,628 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.web.HttpRequestMethodNotSupportedException:Request method 'GET' not supported
2018-08-23 15:12:29,629 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:12:29,636 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 218694c5d5e74aeabaf064346621ed4c(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProduct(String), 0:0:0:0:0:0:0:1(String), 58003(Integer), null, null, 2018-08-23 15:12:29.62(Timestamp), Request method 'GET' not supported(String), productId=67c0a9b618bb47488ab819c05cbff6af(String)
2018-08-23 15:12:29,664 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:13:04,261 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:13:04,262 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:13:04,264 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:13:04,266 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProduct<:=====:>GET<:=====:>productId=67c0a9b618bb47488ab819c05cbff6af<:=====:>Request method 'GET' not supported
2018-08-23 15:13:04,269 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.web.HttpRequestMethodNotSupportedException:Request method 'GET' not supported
2018-08-23 15:13:04,270 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:13:04,271 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: f43919fe7c5044308d737e8c71816bd7(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProduct(String), 0:0:0:0:0:0:0:1(String), 58168(Integer), null, null, 2018-08-23 15:13:04.266(Timestamp), Request method 'GET' not supported(String), productId=67c0a9b618bb47488ab819c05cbff6af(String)
2018-08-23 15:13:04,304 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:13:19,347 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:13:19,347 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:13:19,348 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:13:19,350 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProduct<:=====:>GET<:=====:>productId=67c0a9b618bb47488ab819c05cbff6af<:=====:>Request method 'GET' not supported
2018-08-23 15:13:19,354 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.web.HttpRequestMethodNotSupportedException:Request method 'GET' not supported
2018-08-23 15:13:19,355 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:13:19,355 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 3c6ac617b9474482846c19bd8d47c2f3(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProduct(String), 0:0:0:0:0:0:0:1(String), 58268(Integer), null, null, 2018-08-23 15:13:19.35(Timestamp), Request method 'GET' not supported(String), productId=67c0a9b618bb47488ab819c05cbff6af(String)
2018-08-23 15:13:19,397 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:13:26,929 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:13:26,929 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:13:26,932 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:13:29,231 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where id = ? 
2018-08-23 15:13:29,236 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 67c0a9b618bb47488ab819c05cbff6af(String)
2018-08-23 15:13:29,238 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:13:38,848 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:13:38,848 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:13:38,850 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:13:38,851 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on,p.id from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 15:13:38,852 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:13:38,855 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 133
2018-08-23 15:14:04,135 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:14:04,135 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:14:04,136 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:14:04,139 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/price/analysis/monitor<:=====:>GET<:=====:>timeType=2&priceChangeType=2<:=====:>Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
2018-08-23 15:14:04,140 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.IllegalStateException:Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
2018-08-23 15:14:04,140 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:14:04,141 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 43428d7cf5404e53a82374066a07b89e(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /price/analysis/monitor(String), 0:0:0:0:0:0:0:1(String), 58654(Integer), null, null, 2018-08-23 15:14:04.139(Timestamp), Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.(String), timeType=2&priceChangeType=2(String)
2018-08-23 15:14:04,169 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:14:14,199 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:14:14,200 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:14:14,201 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:14:14,202 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/price/analysis/monitor<:=====:>GET<:=====:>timeType=2&priceChangeType=2<:=====:>Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
2018-08-23 15:14:14,207 ERROR (GlobalDefaultExceptionHandler.java:110)- class java.lang.IllegalStateException:Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
2018-08-23 15:14:14,207 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:14:14,208 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 24a215f169fe464e8e2d25b88eed4583(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /price/analysis/monitor(String), 0:0:0:0:0:0:0:1(String), 58756(Integer), null, null, 2018-08-23 15:14:14.202(Timestamp), Optional short parameter 'isFocusOn' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.(String), timeType=2&priceChangeType=2(String)
2018-08-23 15:14:14,235 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:20:20,453 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:20:20,454 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:20:20,455 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:20:20,460 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 15:20:20,461 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:20:20,465 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 15:20:46,147 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:20:46,147 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:20:47,105 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:20:47,106 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:20:49,660 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:20:49,661 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:20:49,661 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:20:50,998 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.36 seconds (JVM running for 906.277)
2018-08-23 15:20:51,193 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:20:51,193 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:20:51,200 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:20:51,249 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on,p.id from price_publish.product_info p left join dict d on d.id =p.product_big_type_id 
2018-08-23 15:20:51,250 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:20:51,256 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 197
2018-08-23 15:21:36,796 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:21:36,797 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:21:36,798 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:21:36,825 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:21:36,826 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:21:36,829 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:21:36,832 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:21:36,929 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:21:36,934 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:21:36,934 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:21:36,935 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: ec83e98721d24a0d8ac15e0623991576(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 61452(Integer), null, null, 2018-08-23 15:21:36.928(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:21:36,943 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:21:55,644 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:21:55,645 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:21:55,646 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:22:22,126 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:22:22,127 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:22:22,130 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:22:22,131 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:22:22,183 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:22:22,188 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:22:22,188 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:22:22,190 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: df72d7e4e065471dae2e32278f568a2f(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 61520(Integer), null, null, 2018-08-23 15:22:22.183(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:22:22,195 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:25:09,639 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:25:09,639 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:25:09,640 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:25:13,731 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:25:13,732 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:25:13,748 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:25:28,182 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:25:28,236 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:25:28,241 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:25:28,241 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:25:28,242 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: c5507df20e58415fad38ae0776e42172(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 62053(Integer), null, null, 2018-08-23 15:25:28.236(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:25:28,246 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:26:06,074 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:26:06,074 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:26:06,076 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:26:06,080 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:26:06,080 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:26:06,094 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:26:06,095 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:26:06,134 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:26:06,139 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:26:06,140 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:26:06,141 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 437ab4478cab409db8d23a99245c68d7(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 62053(Integer), null, null, 2018-08-23 15:26:06.134(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:26:06,149 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:26:28,223 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:26:28,223 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:26:28,224 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:26:28,229 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:26:28,230 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:26:28,240 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:26:28,241 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:26:28,292 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:26:28,293 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:26:28,293 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:26:28,294 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 2330aad3dade484e946d58099df0b975(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 62053(Integer), null, null, 2018-08-23 15:26:28.292(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:26:28,302 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:32:08,727 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:32:08,727 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:32:08,727 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:32:10,120 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.42 seconds (JVM running for 1585.391)
2018-08-23 15:32:19,293 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:32:19,293 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:32:19,300 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:32:19,370 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:32:19,371 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:32:19,373 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:32:19,374 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:32:19,437 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:32:19,443 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:32:19,444 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:32:19,445 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cd0b37a51a83485fbd480afd56dd569e(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 65441(Integer), null, null, 2018-08-23 15:32:19.437(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:32:19,453 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:33:17,967 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:33:17,967 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:33:17,967 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:33:19,359 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.427 seconds (JVM running for 1654.63)
2018-08-23 15:33:30,466 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:33:30,467 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:33:30,474 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:33:30,554 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:33:30,555 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:33:30,558 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:33:30,558 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:33:30,610 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:33:30,615 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:33:30,616 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:33:30,617 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: fa6597672ced448d9ca077ef99abd3a1(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 49278(Integer), null, null, 2018-08-23 15:33:30.61(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:33:30,626 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:33:45,783 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:33:45,783 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:33:45,785 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:33:45,787 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:33:45,788 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:33:45,792 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:33:45,794 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:33:45,842 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:33:45,844 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:33:45,845 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:33:45,845 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 583918503211429c9d09294acf405359(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 49278(Integer), null, null, 2018-08-23 15:33:45.842(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:33:45,853 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:34:25,638 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:34:25,639 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:34:25,639 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:34:27,066 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.461 seconds (JVM running for 1722.337)
2018-08-23 15:34:29,516 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:34:29,517 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:34:29,524 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:34:29,577 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:34:29,578 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:34:29,582 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:34:29,583 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:34:29,642 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:34:29,645 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:34:29,646 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:34:29,647 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 8b93af8dad264d77b11fcd718262fece(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 49462(Integer), null, null, 2018-08-23 15:34:29.642(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:34:29,654 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:34:34,196 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:34:34,196 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:34:34,197 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:34:34,199 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:34:34,200 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:34:34,202 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:34:34,202 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:34:34,248 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:34:34,250 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:34:34,250 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:34:34,251 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 58e43179937c40da99bbe6dec1a633ac(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 49462(Integer), null, null, 2018-08-23 15:34:34.248(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:34:34,259 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:37:37,400 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:37:37,401 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:37:37,401 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:37:39,084 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.72 seconds (JVM running for 1914.352)
2018-08-23 15:37:43,757 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:37:43,757 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:37:43,763 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:37:43,815 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:37:43,815 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:37:43,818 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:37:43,819 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:37:43,884 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:37:43,887 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:37:43,888 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:37:43,890 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 4520581d5afe473f83c2a68e523e3067(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 51034(Integer), null, null, 2018-08-23 15:37:43.884(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:37:43,895 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:37:49,198 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:37:49,198 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:37:49,199 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:37:49,201 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:37:49,202 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:37:49,205 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:37:49,206 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:37:49,259 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:37:49,263 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:37:49,263 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:37:49,264 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 6608a401ba1042dcab439b2856824460(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 51034(Integer), null, null, 2018-08-23 15:37:49.259(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:37:49,271 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:47:54,063 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:47:54,063 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:47:54,065 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:47:54,085 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:47:54,085 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:47:54,095 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:47:54,095 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:47:54,153 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:47:54,157 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:47:54,157 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:47:54,158 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 35d378f1b9b04144bef32eaf8baddec8(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 57413(Integer), null, null, 2018-08-23 15:47:54.153(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:47:54,167 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:48:11,629 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 10184 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:48:11,630 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:48:11,630 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:48:52,253 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 40.654 seconds (JVM running for 2587.515)
2018-08-23 15:48:57,794 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 5464 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:48:57,795 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:48:57,796 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:49:19,699 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 22.35 seconds (JVM running for 23.005)
2018-08-23 15:49:32,281 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:49:32,281 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:49:32,490 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:49:32,767 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:49:33,018 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:49:33,024 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:49:33,035 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:49:33,180 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:49:33,187 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:49:33,188 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:49:33,195 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: b99349e79b6941df9b1fbb36dca02762(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 58313(Integer), null, null, 2018-08-23 15:49:33.18(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:49:33,205 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:49:35,924 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:49:35,925 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:49:35,926 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:49:35,929 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:49:35,930 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:49:35,933 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:49:35,933 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:49:35,983 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:49:35,985 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:49:35,985 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:49:35,986 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: d1164d9b95a241728a65457dbe2f9e45(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 58313(Integer), null, null, 2018-08-23 15:49:35.983(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:49:35,994 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:49:40,590 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:49:40,590 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:49:40,591 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:49:40,594 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:49:40,594 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:49:40,596 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:49:40,597 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:49:40,649 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:49:40,652 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:49:40,653 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:49:40,654 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: d4e31e806d534fb2b4e0295e5a316a91(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 58313(Integer), null, null, 2018-08-23 15:49:40.649(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:49:40,661 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:51:54,079 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 5464 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:51:54,079 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:51:54,079 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:51:58,846 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 4.791 seconds (JVM running for 182.151)
2018-08-23 15:52:05,009 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:52:05,010 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:52:05,016 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:52:05,070 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:52:05,071 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:52:05,074 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:52:05,074 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:52:05,186 ERROR (GlobalDefaultExceptionHandler.java:63)- http://localhost:8081/collect/product/monitorProducts<:=====:>PUT<:=====:>null<:=====:>
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:52:05,192 ERROR (GlobalDefaultExceptionHandler.java:110)- class org.springframework.jdbc.UncategorizedSQLException:
### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
2018-08-23 15:52:05,193 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: insert into log (id, userId, req_ip, req_uri, req_host, req_port, error_code, error_message, create_time, real_error_message, parameter) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2018-08-23 15:52:05,194 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 358ce9907fb64c45acc9117ee636ab4d(String), 临时用户(String), 0:0:0:0:0:0:0:1(String), /collect/product/monitorProducts(String), 0:0:0:0:0:0:0:1(String), 59500(Integer), null, null, 2018-08-23 15:52:05.186(Timestamp), ### Error updating database.  Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
### SQL: update product_info       set focus_on = 0 where id = ?       and is_del = 0      ;        update product_info       set focus_on = 0 where id = ?       and is_del = 0
### Cause: java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
; uncategorized SQLException; SQL state [null]; error code [0]; sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0; nested exception is java.sql.SQLException: sql injection violation, multi-statement not allow : update product_info
      set focus_on = 0 where id = ?
      and is_del = 0
     ; 
      update product_info
      set focus_on = 0 where id = ?
      and is_del = 0(String), null
2018-08-23 15:52:05,198 ERROR (GlobalDefaultExceptionHandler.java:119)- 
### Error updating database.  Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
### The error may involve com.hywa.pricepublish.dao.mapper.LogMapper.insert-Inline
### The error occurred while setting parameters
### SQL: insert into log (id, userId, req_ip,        req_uri, req_host, req_port,        error_code, error_message, create_time,        real_error_message, parameter)     values (?, ?, ?,        ?, ?, ?,        ?, ?, ?,        ?, ?)
### Cause: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
; ]; Data truncation: Data too long for column 'real_error_message' at row 1; nested exception is com.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long for column 'real_error_message' at row 1
2018-08-23 15:54:23,656 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 5464 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:54:23,657 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:54:23,657 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:54:25,152 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.523 seconds (JVM running for 328.455)
2018-08-23 15:54:29,873 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:54:29,874 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:54:29,881 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:54:29,971 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:54:29,971 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:54:29,974 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 133
2018-08-23 15:54:29,974 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:54:29,976 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 67c0a9b618bb47488ab819c05cbff6af(String), 709674ab567e4806a84f61fa7e6c7867(String)
2018-08-23 15:54:29,978 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:54:41,554 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:54:41,555 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:54:41,557 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:54:41,561 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on,p.id from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 15:54:41,566 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:54:41,579 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 2
2018-08-23 15:58:53,111 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 5464 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:58:53,112 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:58:53,112 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:58:54,584 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.499 seconds (JVM running for 597.885)
2018-08-23 15:58:57,676 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:58:57,693 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:58:57,695 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,126 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,135 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,150 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,151 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,153 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,156 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,157 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,194 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:00,195 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:02,932 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:02,951 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:02,951 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:02,954 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:02,954 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:02,958 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:03,001 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:03,004 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:03,006 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:07,999 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:10,370 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 15:59:10,370 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 15:59:10,376 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:10,432 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 15:59:10,433 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 15:59:10,435 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 2
2018-08-23 15:59:10,435 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 15:59:10,437 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 67c0a9b618bb47488ab819c05cbff6af(String), 709674ab567e4806a84f61fa7e6c7867(String)
2018-08-23 15:59:10,440 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 15:59:13,002 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:18,003 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:23,004 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:28,005 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:33,006 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:38,007 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:43,008 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:48,010 INFO (TokenAuthorFilter.java:97)- token filter过滤ok!
2018-08-23 15:59:54,378 INFO (StartupInfoLogger.java:50)- Starting PricePublishingSystemApplication on LongLi-PC with PID 5464 (D:\ideaWorkSpace\price-publishing-system\target\classes started by zcy in D:\ideaWorkSpace\price-publishing-system)
2018-08-23 15:59:54,378 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.0.2.RELEASE, Spring v5.0.6.RELEASE
2018-08-23 15:59:54,378 INFO (SpringApplication.java:663)- The following profiles are active: dev
2018-08-23 15:59:55,780 INFO (StartupInfoLogger.java:59)- Started PricePublishingSystemApplication in 1.427 seconds (JVM running for 659.08)
2018-08-23 16:00:10,566 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 16:00:10,567 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 16:00:10,660 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 1 where focus_on = 0; 
2018-08-23 16:00:10,661 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 16:00:10,664 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 2
2018-08-23 16:00:10,664 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: update product_info set focus_on = 0 where id = ? and is_del = 0 ; update product_info set focus_on = 0 where id = ? and is_del = 0 
2018-08-23 16:00:10,665 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 67c0a9b618bb47488ab819c05cbff6af(String), 709674ab567e4806a84f61fa7e6c7867(String)
2018-08-23 16:00:10,667 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-08-23 16:00:20,533 INFO (TokenAuthorFilter.java:86)- pc&b8d11ee289394be688ef3a4f6968efed_622d08788e8a4c29b8de4b8fe5797a80
2018-08-23 16:00:20,534 INFO (RedisTokenManager.java:36)- tokenModel : TokenModel(userId=pc&b8d11ee289394be688ef3a4f6968efed, token=622d08788e8a4c29b8de4b8fe5797a80)
2018-08-23 16:00:20,538 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select p.name,d.name type,p.focus_on,p.id from price_publish.product_info p left join dict d on d.id =p.product_big_type_id where p.focus_on = 0; 
2018-08-23 16:00:20,546 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-08-23 16:00:20,548 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 2
